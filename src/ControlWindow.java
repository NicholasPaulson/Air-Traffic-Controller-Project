import java.awt.Color;
import java.awt.Point;
import java.io.File;
import java.util.Date;
import java.util.LinkedList;
import java.util.List;
import java.util.Random;

import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.Clip;
import javax.swing.DefaultListModel;
import javax.swing.JList;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Paulson
 */
public class ControlWindow extends javax.swing.JFrame {
    
    private static final long serialVersionUID = 1L;
	
	Radar radar;
	Handler handler;
	Grid grid;
	Runway runway;
	File audio;
	
	DefaultListModel<Plane> arrivingDLM, departingDLM, runwayDLM;
    /**
     * Creates new form ControlWindow
     */
    public ControlWindow(Radar radar)
    {
    	this.radar = radar;
    	grid = radar.getGrid();
    	handler = radar.handler;
    	runway = radar.runway;
    	
    	arrivingDLM= new DefaultListModel<Plane>();
    	departingDLM = new DefaultListModel<Plane>();
    	runwayDLM = new DefaultListModel<Plane>();
    	
    	
    	audio = new File("alarm.wav");
    	
        initComponents();
        clearControl();
        
        //this.runwayQueueList.setEnabled(false);
        //this.arrivingList.setEnabled(false);
        //this.departingList.setEnabled(false);
        //this.orbitAltitudeSlider.setEnabled(false);
        //this.orbitRadiusSlider.setEnabled(false);
        soundRB.setSelected(true);
        totalQueRB.setSelected(true);
        this.fpsRB.setSelected(true);
        this.totalPlanesRB.setSelected(true);
     
      
        this.orbitButton.setEnabled(false);
        this.orbitAltitudeSlider.setEnabled(false);
        this.jSlider3.setEnabled(false);
        
        typeLabel.setText(null);
        setHelp();
        
        setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

    	jSlider3 = new javax.swing.JSlider();
        buttonGroup1 = new javax.swing.ButtonGroup();
        jLabel20 = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        controlAltitudeSlider = new javax.swing.JSlider();
        controlAltitudeTextField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        controlSpeedSlider = new javax.swing.JSlider();
        controlSpeedTextField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jPanel7 = new javax.swing.JPanel();
        headingSlider = new javax.swing.JSlider();
        controlHeadingTextField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        orbitRadiusSlider = new javax.swing.JPanel();
       
        orbitAltitudeSlider = new javax.swing.JSlider();
        jLabel21 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        idLabel = new javax.swing.JLabel();
        orbitButton = new javax.swing.JButton();
        runwayButton = new javax.swing.JButton();
        exitButton = new javax.swing.JButton();
        controlDestinationComboBox = new javax.swing.JComboBox();
        stateLabel = new javax.swing.JLabel();
        typeLabel = new javax.swing.JLabel();
        arrivingPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        arrivingList = new javax.swing.JList();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        arrivingRemoveButton = new javax.swing.JButton();
        departingPanel = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        departingList = new javax.swing.JList();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        departingRemoveButton = new javax.swing.JButton();
        eventLogPanel = new javax.swing.JPanel();
        jLabel15 = new javax.swing.JLabel();
        eventLogClearButton = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        eventLogTextPane = new javax.swing.JTextPane();
        runwayQueuePanel = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        runwayQueueList = new javax.swing.JList();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        runwayQueueRemoveButton = new javax.swing.JButton();
        radarOptionOuterPanel = new javax.swing.JPanel();
        RadarOptionInnerPanel = new javax.swing.JPanel();
        fpsRB = new javax.swing.JRadioButton();
        totalPlanesRB = new javax.swing.JRadioButton();
        collisionBoundsRB = new javax.swing.JRadioButton();
        toolTipsRB = new javax.swing.JRadioButton();
        
        gridSpacingSlider = new javax.swing.JSlider();
        jLabel24 = new javax.swing.JLabel();
        timeMultiplierSlider = new javax.swing.JSlider();
        jLabel25 = new javax.swing.JLabel();
        radarFadeRB = new javax.swing.JRadioButton();
        soundRB = new javax.swing.JRadioButton();
        totalQueRB = new javax.swing.JRadioButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel17 = new javax.swing.JLabel();
        collisionAvoidanceToggleButton = new javax.swing.JToggleButton();
        radarTurnSpeedSlider = new javax.swing.JSlider();
        jLabel27 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        selectCrashedPlanesButton = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        spawnerAltitudeSlider = new javax.swing.JSlider();
        jLabel7 = new javax.swing.JLabel();
        spawnerAltitudeTextField = new javax.swing.JTextField();
        jPanel9 = new javax.swing.JPanel();
        spawnerSpeedSlider = new javax.swing.JSlider();
        spawnerSpeedTextField = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        addButton = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        spawnerDestinationComboBox = new javax.swing.JComboBox();
        airlineComboBox = new javax.swing.JComboBox();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        gateSlider = new javax.swing.JSlider();
        orbitComboBox = new javax.swing.JComboBox();

        jLabel20.setText("jLabel20");

        jLabel26.setText("jLabel26");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setMinimumSize(new java.awt.Dimension(880, 1040));
        setPreferredSize(new java.awt.Dimension(880, 1040));
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(0, 0, 0));
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        jPanel1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        jPanel5.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        controlAltitudeSlider.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        controlAltitudeSlider.setMajorTickSpacing(2000);
        controlAltitudeSlider.setMaximum(10000);
        controlAltitudeSlider.setMinorTickSpacing(500);
        controlAltitudeSlider.setOrientation(javax.swing.JSlider.VERTICAL);
        controlAltitudeSlider.setPaintLabels(true);
        controlAltitudeSlider.setPaintTicks(true);
        controlAltitudeSlider.setSnapToTicks(true);
        controlAltitudeSlider.setToolTipText("");
        controlAltitudeSlider.setValue(10000);
        controlAltitudeSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                controlAltitudeSliderStateChanged(evt);
            }
        });

        controlAltitudeTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                controlAltitudeTextFieldActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setText("Altitude (ft)");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(controlAltitudeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(controlAltitudeSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(controlAltitudeSlider, javax.swing.GroupLayout.DEFAULT_SIZE, 185, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(controlAltitudeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addGap(6, 6, 6))
        );

        jPanel6.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        controlSpeedSlider.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        controlSpeedSlider.setMajorTickSpacing(50);
        controlSpeedSlider.setMaximum(250);
        controlSpeedSlider.setMinorTickSpacing(10);
        controlSpeedSlider.setOrientation(javax.swing.JSlider.VERTICAL);
        controlSpeedSlider.setPaintLabels(true);
        controlSpeedSlider.setPaintTicks(true);
        controlSpeedSlider.setSnapToTicks(true);
        controlSpeedSlider.setValue(250);
        controlSpeedSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                controlSpeedSliderStateChanged(evt);
            }
        });

        controlSpeedTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                controlSpeedTextFieldActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setText("Speed (knots)");

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(controlSpeedSlider, javax.swing.GroupLayout.DEFAULT_SIZE, 81, Short.MAX_VALUE)
                    .addComponent(controlSpeedTextField))
                .addGap(26, 26, 26))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(controlSpeedSlider, javax.swing.GroupLayout.DEFAULT_SIZE, 185, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(controlSpeedTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addGap(6, 6, 6))
        );

        jPanel7.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        headingSlider.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        headingSlider.setMajorTickSpacing(45);
        headingSlider.setMaximum(360);
        headingSlider.setMinorTickSpacing(15);
        headingSlider.setOrientation(javax.swing.JSlider.VERTICAL);
        headingSlider.setPaintLabels(true);
        headingSlider.setPaintTicks(true);
        headingSlider.setSnapToTicks(true);
        headingSlider.setValue(360);
        headingSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                headingSliderStateChanged(evt);
            }
        });

        controlHeadingTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                controlHeadingTextFieldActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel3.setText("Heading (degrees)");

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel3)
                    .addComponent(headingSlider, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(controlHeadingTextField, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(headingSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(controlHeadingTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addGap(21, 21, 21))
        );

        jLabel6.setFont(new java.awt.Font("Aharoni", 0, 24)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Control");

        jSlider3.setMajorTickSpacing(10);
        jSlider3.setMaximum(50);
        jSlider3.setMinimum(30);
        jSlider3.setMinorTickSpacing(5);
        jSlider3.setPaintLabels(true);
        jSlider3.setPaintTicks(true);
        jSlider3.setSnapToTicks(true);
        jSlider3.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSlider3StateChanged(evt);
            }
        });

        orbitAltitudeSlider.setMajorTickSpacing(2500);
        orbitAltitudeSlider.setMaximum(10000);
        orbitAltitudeSlider.setMinimum(5000);
        orbitAltitudeSlider.setPaintLabels(true);
        orbitAltitudeSlider.setPaintTicks(true);
        orbitAltitudeSlider.setSnapToTicks(true);
        orbitAltitudeSlider.setValue(10000);

        jLabel21.setFont(new java.awt.Font("Aharoni", 0, 11)); // NOI18N
        jLabel21.setText("Orbit Altitude (ft)");

        jLabel22.setFont(new java.awt.Font("Aharoni", 0, 11)); // NOI18N
        jLabel22.setText("Orbit Radius (miles)");

        javax.swing.GroupLayout orbitRadiusSliderLayout = new javax.swing.GroupLayout(orbitRadiusSlider);
        orbitRadiusSlider.setLayout(orbitRadiusSliderLayout);
        orbitRadiusSliderLayout.setHorizontalGroup(
            orbitRadiusSliderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(orbitRadiusSliderLayout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(jLabel21)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, orbitRadiusSliderLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(orbitRadiusSliderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, orbitRadiusSliderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel22)
                        .addComponent(orbitAltitudeSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jSlider3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        orbitRadiusSliderLayout.setVerticalGroup(
            orbitRadiusSliderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(orbitRadiusSliderLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel22)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSlider3, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 37, Short.MAX_VALUE)
                .addComponent(jLabel21)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(orbitAltitudeSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        idLabel.setFont(new java.awt.Font("Aharoni", 0, 48)); // NOI18N
        idLabel.setForeground(new java.awt.Color(255, 255, 255));
        idLabel.setText("AA234");

        orbitButton.setFont(new java.awt.Font("Aharoni", 0, 24)); // NOI18N
        orbitButton.setText("ORBIT");
        orbitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                orbitButtonActionPerformed(evt);
            }
        });

        runwayButton.setFont(new java.awt.Font("Aharoni", 0, 24)); // NOI18N
        runwayButton.setText("RUNWAY");
        runwayButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runwayButtonActionPerformed(evt);
            }
        });

        exitButton.setFont(new java.awt.Font("Aharoni", 0, 24)); // NOI18N
        exitButton.setText("EXIT");
        exitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitButtonActionPerformed(evt);
            }
        });

        controlDestinationComboBox.setFont(new java.awt.Font("Aharoni", 0, 18)); // NOI18N
        controlDestinationComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "GFK", "ATL", "ANC", "AUS", "BWI", "BOS", "CLT", "MDW", "ORD", "CVG", "CLE", "CMH", "DFW", "DEN", "DTW", "FLL", "RSW", "BDL", "HNL", "IAH", "HOU", "IND", "MCI", "LAS", "LAX", "MEM", "MIA", "MSP", "BNA", "MSY", "JFK", "LGA", "EWR", "OAK", "ONT", "MCO", "PHL", "PHX", "PIT", "PDX", "RDU", "SMF", "SLC", "SAT", "SAN", "SFO", "SJC", "SNA", "SEA", "STL", "TPA", "IAD", "DCA" }));
        controlDestinationComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                controlDestinationComboBoxActionPerformed(evt);
            }
        });

        stateLabel.setFont(new java.awt.Font("Aharoni", 0, 14)); // NOI18N
        stateLabel.setForeground(new java.awt.Color(255, 255, 255));
        stateLabel.setText("State");

        typeLabel.setFont(new java.awt.Font("Aharoni", 0, 14)); // NOI18N
        typeLabel.setForeground(new java.awt.Color(255, 255, 255));
        typeLabel.setText("Departing");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(300, 300, 300)
                        .addComponent(jLabel6))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(orbitRadiusSlider, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(orbitButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(5, 5, 5)
                        .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(runwayButton, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(exitButton, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(controlDestinationComboBox, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(40, 40, 40)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(stateLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(typeLabel)
                                            .addComponent(idLabel))
                                        .addGap(0, 0, Short.MAX_VALUE)))))))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(stateLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, 258, Short.MAX_VALUE)
                    .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(orbitButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(orbitRadiusSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(idLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(controlDestinationComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(typeLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(runwayButton, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(exitButton, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(238, 238, 238))
        );

        idLabel.getAccessibleContext().setAccessibleName("ID");

        arrivingPanel.setBackground(new java.awt.Color(0, 0, 0));
        arrivingList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                arrivingListValueChanged(evt);
            }
        });

        jScrollPane1.setViewportView(arrivingList);

        jLabel11.setFont(new java.awt.Font("Aharoni", 0, 24)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(255, 255, 255));
        jLabel11.setText("Planes");

        jLabel12.setFont(new java.awt.Font("Aharoni", 0, 18)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(255, 255, 255));
        jLabel12.setText(" Arriving");

        arrivingRemoveButton.setText("Remove");
        arrivingRemoveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                arrivingRemoveButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout arrivingPanelLayout = new javax.swing.GroupLayout(arrivingPanel);
        arrivingPanel.setLayout(arrivingPanelLayout);
        arrivingPanelLayout.setHorizontalGroup(
            arrivingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, arrivingPanelLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(arrivingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11))
                .addGap(21, 21, 21))
            .addGroup(arrivingPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(arrivingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(arrivingRemoveButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        arrivingPanelLayout.setVerticalGroup(
            arrivingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, arrivingPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel11)
                .addGap(1, 1, 1)
                .addComponent(jLabel12)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(arrivingRemoveButton)
                .addContainerGap())
        );

        departingPanel.setBackground(new java.awt.Color(0, 0, 0));
        departingList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt){
                departingListValueChanged(evt);
            }
        });

        jScrollPane3.setViewportView(departingList);

        jLabel13.setFont(new java.awt.Font("Aharoni", 0, 24)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(255, 255, 255));
        jLabel13.setText("Planes");

        jLabel14.setFont(new java.awt.Font("Aharoni", 0, 18)); // NOI18N
        jLabel14.setForeground(new java.awt.Color(255, 255, 255));
        jLabel14.setText("Departing");

        departingRemoveButton.setText("Remove");
        departingRemoveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                departingRemoveButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout departingPanelLayout = new javax.swing.GroupLayout(departingPanel);
        departingPanel.setLayout(departingPanelLayout);
        departingPanelLayout.setHorizontalGroup(
            departingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, departingPanelLayout.createSequentialGroup()
                .addGroup(departingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, departingPanelLayout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addGroup(departingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel13)))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, departingPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(departingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(departingRemoveButton, javax.swing.GroupLayout.DEFAULT_SIZE, 128, Short.MAX_VALUE)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))))
                .addGap(10, 10, 10))
        );
        departingPanelLayout.setVerticalGroup(
            departingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, departingPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel13)
                .addGap(1, 1, 1)
                .addComponent(jLabel14)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 378, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(departingRemoveButton)
                .addContainerGap())
        );

        eventLogPanel.setBackground(new java.awt.Color(0, 0, 0));

        jLabel15.setFont(new java.awt.Font("Aharoni", 0, 36)); // NOI18N
        jLabel15.setForeground(new java.awt.Color(255, 255, 255));
        jLabel15.setText("Event Log");

        eventLogClearButton.setText("Clear");
        eventLogClearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eventLogClearButtonActionPerformed(evt);
            }
        });

        jScrollPane4.setViewportView(eventLogTextPane);

        javax.swing.GroupLayout eventLogPanelLayout = new javax.swing.GroupLayout(eventLogPanel);
        eventLogPanel.setLayout(eventLogPanelLayout);
        eventLogPanelLayout.setHorizontalGroup(
            eventLogPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(eventLogPanelLayout.createSequentialGroup()
                .addGroup(eventLogPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, eventLogPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(eventLogClearButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(eventLogPanelLayout.createSequentialGroup()
                        .addGap(72, 72, 72)
                        .addComponent(jLabel15)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(eventLogPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane4)))
                .addContainerGap())
        );
        eventLogPanelLayout.setVerticalGroup(
            eventLogPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, eventLogPanelLayout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(jLabel15, javax.swing.GroupLayout.DEFAULT_SIZE, 42, Short.MAX_VALUE)
                .addGap(11, 11, 11)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 366, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(eventLogClearButton, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(13, 13, 13))
        );

        runwayQueuePanel.setBackground(new java.awt.Color(0, 0, 0));
        runwayQueueList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                runwayQueueListValueChanged(evt);
            }
        });

        jScrollPane2.setViewportView(runwayQueueList);

        jLabel4.setFont(new java.awt.Font("Aharoni", 0, 24)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Runway");

        jLabel5.setFont(new java.awt.Font("Aharoni", 0, 18)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Queue");

        runwayQueueRemoveButton.setText("Remove");
        runwayQueueRemoveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runwayQueueRemoveButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout runwayQueuePanelLayout = new javax.swing.GroupLayout(runwayQueuePanel);
        runwayQueuePanel.setLayout(runwayQueuePanelLayout);
        runwayQueuePanelLayout.setHorizontalGroup(
            runwayQueuePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(runwayQueuePanelLayout.createSequentialGroup()
                .addGroup(runwayQueuePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(runwayQueuePanelLayout.createSequentialGroup()
                        .addGroup(runwayQueuePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(runwayQueuePanelLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(runwayQueuePanelLayout.createSequentialGroup()
                                .addGap(39, 39, 39)
                                .addGroup(runwayQueuePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(runwayQueuePanelLayout.createSequentialGroup()
                                        .addGap(10, 10, 10)
                                        .addComponent(jLabel5))
                                    .addComponent(jLabel4))))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, runwayQueuePanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(runwayQueueRemoveButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        runwayQueuePanelLayout.setVerticalGroup(
            runwayQueuePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(runwayQueuePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(runwayQueueRemoveButton)
                .addContainerGap())
        );

        radarOptionOuterPanel.setBackground(new java.awt.Color(0, 0, 0));

        RadarOptionInnerPanel.setBackground(new java.awt.Color(204, 204, 204));

        fpsRB.setText("Show FPS");
        fpsRB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fpsRBActionPerformed(evt);
            }
        });

        totalPlanesRB.setText("Show Total Planes");
        totalPlanesRB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                totalPlanesRBActionPerformed(evt);
            }
        });

        collisionBoundsRB.setText("show Collision Bounds");
        collisionBoundsRB.setSelected(true);
        collisionBoundsRB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                collisionBoundsRBActionPerformed(evt);
            }
        });

        toolTipsRB.setText("show HUD");
        toolTipsRB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toolTipsRBActionPerformed(evt);
            }
        });

        gridSpacingSlider.setMajorTickSpacing(5);
        gridSpacingSlider.setMaximum(10);
        gridSpacingSlider.setPaintLabels(true);
        gridSpacingSlider.setPaintTicks(true);
        gridSpacingSlider.setSnapToTicks(true);
        gridSpacingSlider.setValue(5);
        gridSpacingSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                gridSpacingSliderStateChanged(evt);
            }
        });

        jLabel24.setFont(new java.awt.Font("Aharoni", 0, 18)); // NOI18N
        jLabel24.setText("Grid Spacing");

        timeMultiplierSlider.setMajorTickSpacing(1);
        timeMultiplierSlider.setMaximum(10);
        timeMultiplierSlider.setMinimum(1);
        timeMultiplierSlider.setPaintLabels(true);
        timeMultiplierSlider.setPaintTicks(true);
        timeMultiplierSlider.setSnapToTicks(true);
        timeMultiplierSlider.setValue(1);
        timeMultiplierSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                timeMultiplierSliderStateChanged(evt);
            }
        });

        jLabel25.setFont(new java.awt.Font("Aharoni", 0, 18)); // NOI18N
        jLabel25.setText("Time Multiplier");

        radarFadeRB.setText("Radar Fade");
        radarFadeRB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radarFadeRBActionPerformed(evt);
            }
        });

        soundRB.setText("Sound");
        soundRB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                soundRBActionPerformed(evt);
            }
        });

        totalQueRB.setText("Show Total Queued");
        totalQueRB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                totalQueRBActionPerformed(evt);
            }
        });

        jPanel3.setBackground(new java.awt.Color(0, 51, 51));

        jLabel17.setFont(new java.awt.Font("Aharoni", 0, 14)); // NOI18N
        jLabel17.setForeground(new java.awt.Color(255, 255, 255));
        jLabel17.setText("Collision Avoidance");

        collisionAvoidanceToggleButton.setBackground(java.awt.Color.red);
        collisionAvoidanceToggleButton.setFont(new java.awt.Font("Aharoni", 0, 18)); // NOI18N
        collisionAvoidanceToggleButton.setText("OFF");
        collisionAvoidanceToggleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                collisionAvoidanceToggleButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(collisionAvoidanceToggleButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(jLabel17)
                .addContainerGap(22, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel17)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(collisionAvoidanceToggleButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        radarTurnSpeedSlider.setMajorTickSpacing(1);
        radarTurnSpeedSlider.setMaximum(5);
        radarTurnSpeedSlider.setPaintLabels(true);
        radarTurnSpeedSlider.setPaintTicks(true);
        radarTurnSpeedSlider.setSnapToTicks(true);
        radarTurnSpeedSlider.setValue(4);
        radarTurnSpeedSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                radarTurnSpeedSliderStateChanged(evt);
            }
        });

        jLabel27.setFont(new java.awt.Font("Aharoni", 0, 18)); // NOI18N
        jLabel27.setText("Radar Turn Speed");

        javax.swing.GroupLayout RadarOptionInnerPanelLayout = new javax.swing.GroupLayout(RadarOptionInnerPanel);
        RadarOptionInnerPanel.setLayout(RadarOptionInnerPanelLayout);
        RadarOptionInnerPanelLayout.setHorizontalGroup(
            RadarOptionInnerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(RadarOptionInnerPanelLayout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addComponent(jLabel25)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(RadarOptionInnerPanelLayout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(jLabel27)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(RadarOptionInnerPanelLayout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addComponent(jLabel24)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(RadarOptionInnerPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(RadarOptionInnerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(RadarOptionInnerPanelLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(RadarOptionInnerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(collisionBoundsRB)
                            .addComponent(totalPlanesRB)
                            .addComponent(toolTipsRB)
                            .addComponent(radarFadeRB)
                            .addComponent(soundRB)
                            .addComponent(totalQueRB)
                            .addComponent(fpsRB)))
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, RadarOptionInnerPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(RadarOptionInnerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(gridSpacingSlider, javax.swing.GroupLayout.DEFAULT_SIZE, 183, Short.MAX_VALUE)
                    .addComponent(radarTurnSpeedSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(timeMultiplierSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
        );
        RadarOptionInnerPanelLayout.setVerticalGroup(
            RadarOptionInnerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(RadarOptionInnerPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(fpsRB)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(totalQueRB)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(totalPlanesRB)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(collisionBoundsRB)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(toolTipsRB)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(soundRB)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(radarFadeRB)
                .addGap(13, 13, 13)
                .addComponent(jLabel24)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(gridSpacingSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel27)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(radarTurnSpeedSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel25)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(timeMultiplierSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jLabel16.setFont(new java.awt.Font("Aharoni", 0, 24)); // NOI18N
        jLabel16.setForeground(new java.awt.Color(255, 255, 255));
        jLabel16.setText("Radar Options");

        selectCrashedPlanesButton.setText("Remove Crashed Planes");
        selectCrashedPlanesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectCrashedPlanesButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout radarOptionOuterPanelLayout = new javax.swing.GroupLayout(radarOptionOuterPanel);
        radarOptionOuterPanel.setLayout(radarOptionOuterPanelLayout);
        radarOptionOuterPanelLayout.setHorizontalGroup(
            radarOptionOuterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(radarOptionOuterPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(radarOptionOuterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(selectCrashedPlanesButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(RadarOptionInnerPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, radarOptionOuterPanelLayout.createSequentialGroup()
                        .addGap(0, 17, Short.MAX_VALUE)
                        .addComponent(jLabel16)
                        .addGap(18, 18, 18)))
                .addContainerGap())
        );
        radarOptionOuterPanelLayout.setVerticalGroup(
            radarOptionOuterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(radarOptionOuterPanelLayout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(jLabel16)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(RadarOptionInnerPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(selectCrashedPlanesButton)
                .addContainerGap())
        );

        jPanel2.setBackground(new java.awt.Color(0, 51, 51));
        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        jPanel8.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        spawnerAltitudeSlider.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        spawnerAltitudeSlider.setMajorTickSpacing(2000);
        spawnerAltitudeSlider.setMaximum(10000);
        spawnerAltitudeSlider.setMinorTickSpacing(500);
        spawnerAltitudeSlider.setOrientation(javax.swing.JSlider.VERTICAL);
        spawnerAltitudeSlider.setPaintLabels(true);
        spawnerAltitudeSlider.setPaintTicks(true);
        spawnerAltitudeSlider.setSnapToTicks(true);
        spawnerAltitudeSlider.setToolTipText("");
        spawnerAltitudeSlider.setValue(10000);
        spawnerAltitudeSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spawnerAltitudeSliderStateChanged(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel7.setText("Altitude (ft)");

        spawnerAltitudeTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                spawnerAltitudeTextFieldActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(spawnerAltitudeSlider, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(spawnerAltitudeTextField))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(spawnerAltitudeSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(spawnerAltitudeTextField)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel7)
                .addGap(6, 6, 6))
        );

        jPanel9.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        spawnerSpeedSlider.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        spawnerSpeedSlider.setMajorTickSpacing(50);
        spawnerSpeedSlider.setMaximum(250);
        spawnerSpeedSlider.setMinorTickSpacing(10);
        spawnerSpeedSlider.setOrientation(javax.swing.JSlider.VERTICAL);
        spawnerSpeedSlider.setPaintLabels(true);
        spawnerSpeedSlider.setPaintTicks(true);
        spawnerSpeedSlider.setSnapToTicks(true);
        spawnerSpeedSlider.setValue(250);
        spawnerSpeedSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spawnerSpeedSliderStateChanged(evt);
            }
        });

        spawnerSpeedTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                spawnerSpeedTextFieldActionPerformed(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel8.setText("Speed (knots)");

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel9Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(spawnerSpeedSlider, javax.swing.GroupLayout.DEFAULT_SIZE, 78, Short.MAX_VALUE)
                    .addComponent(spawnerSpeedTextField))
                .addContainerGap())
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addComponent(jLabel8)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(spawnerSpeedSlider, javax.swing.GroupLayout.DEFAULT_SIZE, 95, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(spawnerSpeedTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel8)
                .addGap(6, 6, 6))
        );

        addButton.setBackground(java.awt.Color.cyan);
        addButton.setFont(new java.awt.Font("Aharoni", 0, 24)); // NOI18N
        addButton.setText("ADD");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        jLabel10.setBackground(new java.awt.Color(255, 255, 255));
        jLabel10.setFont(new java.awt.Font("Aharoni", 0, 24)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(255, 255, 255));
        jLabel10.setText("Custom Plane Spawner");

        spawnerDestinationComboBox.setFont(new java.awt.Font("Aharoni", 1, 18)); // NOI18N
        spawnerDestinationComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "GFK", "ATL", "ANC", "AUS", "BWI", "BOS", "CLT", "MDW", "ORD", "CVG", "CLE", "CMH", "DFW", "DEN", "DTW", "FLL", "RSW", "BDL", "HNL", "IAH", "HOU", "IND", "MCI", "LAS", "LAX", "MEM", "MIA", "MSP", "BNA", "MSY", "JFK", "LGA", "EWR", "OAK", "ONT", "MCO", "PHL", "PHX", "PIT", "PDX", "RDU", "SMF", "SLC", "SAT", "SAN", "SFO", "SJC", "SNA", "SEA", "STL", "TPA", "IAD", "DCA" }));
        spawnerDestinationComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                spawnerDestinationComboBoxActionPerformed(evt);
            }
        });

        airlineComboBox.setFont(new java.awt.Font("Aharoni", 1, 18)); // NOI18N
        airlineComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "P", "AS", "AQ", "HP", "AA", "AP", "CO", "DL", "HA", "YX", "NW", "WN", "FF", "TW", "UA", "US", "FL", "G4" }));
        airlineComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                airlineComboBoxActionPerformed(evt);
            }
        });

        jLabel18.setFont(new java.awt.Font("Aharoni", 1, 14)); // NOI18N
        jLabel18.setForeground(new java.awt.Color(255, 255, 255));
        jLabel18.setText("Destination");

        jLabel19.setFont(new java.awt.Font("Aharoni", 1, 14)); // NOI18N
        jLabel19.setForeground(new java.awt.Color(255, 255, 255));
        jLabel19.setText("Airline");

        jLabel9.setFont(new java.awt.Font("Aharoni", 0, 14)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setText("Entering Gate");

        gateSlider.setBackground(new java.awt.Color(0, 0, 0));
        gateSlider.setForeground(new java.awt.Color(255, 255, 255));
        gateSlider.setMajorTickSpacing(90);
        gateSlider.setMaximum(315);
        gateSlider.setMinimum(45);
        gateSlider.setPaintLabels(true);
        gateSlider.setPaintTicks(true);
        gateSlider.setSnapToTicks(true);

        orbitComboBox.setFont(new java.awt.Font("Aharoni", 0, 11)); // NOI18N
        orbitComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Clockwise Orbit", "Counterclockwise Orbit" }));
        orbitComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                orbitComboBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(airlineComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addGap(16, 16, 16)
                                        .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addComponent(spawnerDestinationComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(2, 2, 2)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel9)
                        .addGap(37, 37, 37))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(gateSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(addButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(orbitComboBox, 0, 140, Short.MAX_VALUE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel10)
                .addGap(104, 104, 104))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(jLabel10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel18)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(spawnerDestinationComboBox)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel19)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(airlineComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(19, 19, 19))
                    .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                        .addComponent(addButton, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(orbitComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(gateSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(runwayQueuePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(eventLogPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(radarOptionOuterPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(departingPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(arrivingPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 302, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(9, 9, 9)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(runwayQueuePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(eventLogPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addComponent(radarOptionOuterPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(arrivingPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(departingPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void controlHeadingTextFieldActionPerformed(java.awt.event.ActionEvent evt)
    {//GEN-FIRST:event_controlHeadingTextFieldActionPerformed
    	double value = 0;
    	for (Plane p : handler.planeList)
        {
      	   if (p.isSelected)
      	   {
      		   
	      		try
		  		{
	      			value = Double.parseDouble(controlHeadingTextField.getText());
		  		}
		    	catch(Exception e)
		    	{
		    		return;
		    	}
		  		   
		  		headingSlider.setValue((int) p.changeHeading(value));
		  		controlHeadingTextField.setText("" + (int)(value % 360));
      	   }
        }
    }//GEN-LAST:event_controlHeadingTextFieldActionPerformed

    private void controlAltitudeTextFieldActionPerformed(java.awt.event.ActionEvent evt)
    {//GEN-FIRST:event_controlAltitudeTextFieldActionPerformed
    	double value = 0;
    	for (Plane p : handler.planeList)
        {
      	   if (p.isSelected)
      	   {
      		   
	      		try
		  		{
	      			value = Double.parseDouble(controlAltitudeTextField.getText());
		  		}
		    	catch(Exception e)
		    	{
		    		return;
		    	}
		  		   
		  		if (value >= 0)
		  		{
		  			p.changeAltitude(value);
		  			controlAltitudeSlider.setValue((int) value);
		  		}
      	   }
        }
    }//GEN-LAST:event_controlAltitudeTextFieldActionPerformed

    private void arrivingRemoveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_arrivingRemoveButtonActionPerformed
    	 List<Plane> planeList = arrivingList.getSelectedValuesList();
         for (Plane p : planeList)
         {
         	if (p.isQueued() || p.state == State.Free || p.state == State.Parked)
         	{
	        	radar.runway.Q.remove(p);
	         	removeFromRunwayQueueList(p);
	         	handler.removeObject(p);
         	}
         }
    }//GEN-LAST:event_arrivingRemoveButtonActionPerformed

    private void departingRemoveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_departingRemoveButtonActionPerformed
    	 List<Plane> planeList = departingList.getSelectedValuesList();
         for (Plane p : planeList)
         {
        	 if (p.isQueued() || p.state == State.Free || p.state == State.Parked)
        	 {
	        	radar.runway.Q.remove(p);
	         	removeFromRunwayQueueList(p);
	         	handler.removeObject(p);
        	 }
         }
    }//GEN-LAST:event_departingRemoveButtonActionPerformed

    private void runwayQueueRemoveButtonActionPerformed(java.awt.event.ActionEvent evt)
    {//GEN-FIRST:event_runwayQueueRemoveButtonActionPerformed
        List<Plane> planeList = runwayQueueList.getSelectedValuesList();
        for (Plane p : planeList)
        {
        	radar.runway.Q.remove(p);
        	removeFromRunwayQueueList(p);
        }
    }//GEN-LAST:event_runwayQueueRemoveButtonActionPerformed

    private void spawnerDestinationComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_spawnerDestinationComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_spawnerDestinationComboBoxActionPerformed

    private void airlineComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_airlineComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_airlineComboBoxActionPerformed

    private void spawnerSpeedTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_spawnerSpeedTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_spawnerSpeedTextFieldActionPerformed

    private void controlSpeedTextFieldActionPerformed(java.awt.event.ActionEvent evt)
    {//GEN-FIRST:event_controlSpeedTextFieldActionPerformed
    	double value = 0;
       for (Plane p : handler.planeList)
       {
    	   if (p.isSelected)
    	   {
    		   try
    		   {
    			   value = Double.parseDouble(controlSpeedTextField.getText());
    		   }
      		   catch(Exception e)
      		   {
      			   return;
      		   }
    		   
    		   if (value >= 0)
    		   {
    			   p.changeSpeed(value);
    			   controlSpeedSlider.setValue((int) value);
    		   }
    	   }
       }
    }//GEN-LAST:event_controlSpeedTextFieldActionPerformed

    private void eventLogClearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eventLogClearButtonActionPerformed
        eventLogTextPane.setText(null);
    }//GEN-LAST:event_eventLogClearButtonActionPerformed

    private void orbitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_orbitButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_orbitButtonActionPerformed

    private void controlDestinationComboBoxActionPerformed(java.awt.event.ActionEvent evt)
    {//GEN-FIRST:event_controlDestinationComboBoxActionPerformed
        for (Plane p : handler.planeList)
        {
        	if (p.isSelected)
        	{
        		if (p.isArriving())
        		{
        			controlDestinationComboBox.setSelectedItem("GFK");
        		}
        		else
        		{
        			p.setDestination(controlDestinationComboBox.getSelectedItem().toString());
        		}
        	}
        }
    }//GEN-LAST:event_controlDestinationComboBoxActionPerformed

    private void runwayButtonActionPerformed(java.awt.event.ActionEvent evt)
    {//GEN-FIRST:event_runwayButtonActionPerformed
        for (Plane plane : handler.planeList)
    	{
    		if (plane.isSelected && plane.state == State.Free)
    		{
    			plane.joinQueueToLandRequest();
    		}
    	}
    	
    	{
        	for (Plane plane : handler.planeList)
        	{
        		if (plane.isSelected && plane.state == State.Parked)
        		{
        			plane.joinQueueToTakeoffRequest();
        		}
        	}
        }
    }//GEN-LAST:event_runwayButtonActionPerformed

    private void exitButtonActionPerformed(java.awt.event.ActionEvent evt)
    {//GEN-FIRST:event_exitButtonActionPerformed
        for (Plane p : handler.planeList)
        {
        	if (p.isSelected && p.state == State.Free)
        	{
        		p.changeState(State.Exiting);
        		p.goToGate();
        	}
        }
    }//GEN-LAST:event_exitButtonActionPerformed

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt)
    {//GEN-FIRST:event_addButtonActionPerformed
        int gate = gateSlider.getValue();
        Point point = new Point();
        double speed = Plane.KnotsToMagnitude(spawnerSpeedSlider.getValue());
        int altitude = spawnerAltitudeSlider.getValue();
        int orbitDirection = orbitComboBox.getSelectedIndex();
        int destinationIndex = spawnerDestinationComboBox.getSelectedIndex();
        Random rand = new Random();
        Plane p = null;
        
        if (destinationIndex == 0)
        {
        	
	        if ( gate == 45)
	        {
	        	point.x = radar.gate.gatePoint[3].x;
	        	point.y = radar.gate.gatePoint[3].y;
	        	if (orbitDirection == 0)
	        	{
	        		point.x -= 100;
	        		point.y -= 100;
	        	}
	        	else
	        	{
	        		point.x += 100;
	        		point.y += 100;
	        	}
	        }
	        else if (gate == 135)
	        {
	        	point.x = radar.gate.gatePoint[2].x;
	        	point.y = radar.gate.gatePoint[2].y;
	        	if (orbitDirection == 0)
	        	{
	        		point.x -= 100;
	        		point.y += 100;
	        	}
	        	else
	        	{
	        		point.x += 100;
	        		point.y -= 100;
	        	}
	        }
	        else if (gate == 225)
	        {
	        	point.x = radar.gate.gatePoint[1].x;
	        	point.y = radar.gate.gatePoint[1].y;
	        	if (orbitDirection == 0)
	        	{
	        		point.x += 100;
	        		point.y += 100;
	        	}
	        	else
	        	{
	        		point.x -= 100;
	        		point.y -= 100;
	        	}
	        }
	        else
	        {
	        	point.x = radar.gate.gatePoint[0].x;
	        	point.y = radar.gate.gatePoint[0].y;
	        	if (orbitDirection == 0)
	        	{
	        		point.x += 100;
	        		point.y -= 100;
	        	}
	        	else
	        	{
	        		point.x -= 100;
	        		point.y += 100;
	        	}
	        }
        }
        else
        {
        	int randDistance = rand.nextInt(100);
        	int randDegree = rand.nextInt(360);
        	point.x = (int)grid.polarToX(randDistance, randDegree);
        	point.y = (int)grid.polarToY(randDistance, randDegree);
        	System.out.println(point);
        	point = grid.pointToPixel(point);
        	speed = 0;
        	altitude = 0;
        	gate = randDegree;
        	
        }
        p = new Plane(point.x, point.y, altitude, new Vector((speed), -gate), radar);
        handler.addObject(p);
        
      
    
        
        
    }//GEN-LAST:event_addButtonActionPerformed

    private void orbitComboBoxActionPerformed(java.awt.event.ActionEvent evt)
    {//GEN-FIRST:event_orbitComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_orbitComboBoxActionPerformed

    private void spawnerAltitudeTextFieldActionPerformed(java.awt.event.ActionEvent evt)
    {//GEN-FIRST:event_spawnerAltitudeTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_spawnerAltitudeTextFieldActionPerformed

    private void selectCrashedPlanesButtonActionPerformed(java.awt.event.ActionEvent evt)
    {//GEN-FIRST:event_selectCrashedPlanesButtonActionPerformed
    	LinkedList<Plane> list = new LinkedList<Plane>();
        for (Plane p : handler.planeList)
        {
        	if (p.state == State.Crashed)
			{
				list.add(p);
			}
        }
        for (Plane p : list)
        {
        	radar.runway.Q.remove(p);
         	removeFromRunwayQueueList(p);
        	handler.removeObject(p);
        }
    }//GEN-LAST:event_selectCrashedPlanesButtonActionPerformed

    private void totalQueRBActionPerformed(java.awt.event.ActionEvent evt)
    {//GEN-FIRST:event_totalQueRBActionPerformed
    	if (totalQueRB.isSelected()) radar.showQSum = true;
        else radar.showQSum = false;
    }//GEN-LAST:event_totalQueRBActionPerformed

    private void soundRBActionPerformed(java.awt.event.ActionEvent evt)
    {//GEN-FIRST:event_soundRBActionPerformed
    	if (soundRB.isSelected()) radar.soundOn = true;
        else radar.soundOn = false;
    }//GEN-LAST:event_soundRBActionPerformed

    private void radarFadeRBActionPerformed(java.awt.event.ActionEvent evt)
    {//GEN-FIRST:event_radarFadeRBActionPerformed
        if (radarFadeRB.isSelected()) radar.rh.handFadeOn = true;
        else radar.rh.handFadeOn = false;
    }//GEN-LAST:event_radarFadeRBActionPerformed

    private void gridSpacingSliderStateChanged(javax.swing.event.ChangeEvent evt)
    {//GEN-FIRST:event_gridSpacingSliderStateChanged
    	int value = gridSpacingSlider.getValue();
    	if (value == 0) value = 1;
    	radar.rh.setPolarGridDivision(value);
    }//GEN-LAST:event_gridSpacingSliderStateChanged

    private void toolTipsRBActionPerformed(java.awt.event.ActionEvent evt)
    {//GEN-FIRST:event_toolTipsRBActionPerformed
    	if (toolTipsRB.isSelected()) radar.showHUD = true;
        else radar.showHUD = false;
    }//GEN-LAST:event_toolTipsRBActionPerformed

    private void collisionBoundsRBActionPerformed(java.awt.event.ActionEvent evt)
    {//GEN-FIRST:event_collisionBoundsRBActionPerformed
    	if (collisionBoundsRB.isSelected()) radar.showCollisionBounds = true;
        else radar.showCollisionBounds = false;
    }//GEN-LAST:event_collisionBoundsRBActionPerformed

    private void totalPlanesRBActionPerformed(java.awt.event.ActionEvent evt)
    {//GEN-FIRST:event_totalPlanesRBActionPerformed
    	if (totalPlanesRB.isSelected()) {radar.showPlaneSum = true; radar.showSelectedSum = true;}
        else {radar.showPlaneSum = false; radar.showSelectedSum = false;}
    }//GEN-LAST:event_totalPlanesRBActionPerformed

    private void fpsRBActionPerformed(java.awt.event.ActionEvent evt)
    {//GEN-FIRST:event_fpsRBActionPerformed
    	if (fpsRB.isSelected()) radar.showFPS = true;
        else radar.showFPS = false;
    }//GEN-LAST:event_fpsRBActionPerformed

    private void radarTurnSpeedSliderStateChanged(javax.swing.event.ChangeEvent evt)
    {//GEN-FIRST:event_radarTurnSpeedSliderStateChanged
        radar.rh.velocity = radarTurnSpeedSlider.getValue();
    }//GEN-LAST:event_radarTurnSpeedSliderStateChanged

    private void controlAltitudeSliderStateChanged(javax.swing.event.ChangeEvent evt)
    {//GEN-FIRST:event_controlAltitudeSliderStateChanged
    	double value = 0;
    	for (Plane p : handler.planeList)
        {
      	   if (p.isSelected)
      	   {
      		   value = controlAltitudeSlider.getValue();
      		   p.changeAltitude(value);
      		   controlAltitudeTextField.setText(""+(int) value);
      	   }
        }
    }//GEN-LAST:event_controlAltitudeSliderStateChanged

    private void controlSpeedSliderStateChanged(javax.swing.event.ChangeEvent evt)
    {//GEN-FIRST:event_controlSpeedSliderStateChanged
    	double value = 0;
        for (Plane p : handler.planeList)
        {
     	   if (p.isSelected && p.state != State.Crashed)
     	   {
     			  	value = controlSpeedSlider.getValue();
     		  
     			   p.changeSpeed(value);
     			   controlSpeedTextField.setText(""+(int) value);
     	   }
        }
    }//GEN-LAST:event_controlSpeedSliderStateChanged

    private void headingSliderStateChanged(javax.swing.event.ChangeEvent evt)
    {//GEN-FIRST:event_headingSliderStateChanged
    	double value = 0;
        for (Plane p : handler.planeList)
        {
     	   if (p.isSelected)
     	   {
     			  value = headingSlider.getValue();
     		  
     			   p.changeHeading(value);
     			   controlHeadingTextField.setText(""+(int) value);
     	   }
        }
    }//GEN-LAST:event_headingSliderStateChanged

    private void spawnerAltitudeSliderStateChanged(javax.swing.event.ChangeEvent evt)
    {//GEN-FIRST:event_spawnerAltitudeSliderStateChanged
        spawnerAltitudeTextField.setText(""+spawnerAltitudeSlider.getValue());
    }//GEN-LAST:event_spawnerAltitudeSliderStateChanged

    private void spawnerSpeedSliderStateChanged(javax.swing.event.ChangeEvent evt)
    {//GEN-FIRST:event_spawnerSpeedSliderStateChanged
        spawnerSpeedTextField.setText(""+spawnerSpeedSlider.getValue());
    }//GEN-LAST:event_spawnerSpeedSliderStateChanged

    private void timeMultiplierSliderStateChanged(javax.swing.event.ChangeEvent evt)
    {//GEN-FIRST:event_timeMultiplierSliderStateChanged
    	int value = timeMultiplierSlider.getValue();
        radar.timeMutiplier = value;
        for (Plane p : handler.planeList)
        {
        	p.getVector().changeMagnitude(p.getVector().getMagnitude() / p.getVector().getScalar());
        	p.getVector().changeScalar(value);
        	p.getVector().scale();
        }
        radar.timeMutiplier = value;
    }//GEN-LAST:event_timeMultiplierSliderStateChanged

    private void jSlider3StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSlider3StateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_jSlider3StateChanged
    
    private void collisionAvoidanceToggleButtonActionPerformed(java.awt.event.ActionEvent evt)
    {                                                               
    	if (collisionAvoidanceToggleButton.isSelected())
    	{
    		setSpawnerEnabled(false);
    		collisionAvoidanceToggleButton.setText("ON");
    		collisionAvoidanceToggleButton.setBackground(Color.green);
    		radar.collisionAvoidanceOn = true;
    	}
    	else
    	{
    		setSpawnerEnabled(true);
    		collisionAvoidanceToggleButton.setText("OFF");
    		collisionAvoidanceToggleButton.setDisabledIcon(collisionAvoidanceToggleButton.getIcon());
    		collisionAvoidanceToggleButton.setBackground(Color.red);
    		radar.collisionAvoidanceOn = false;
    		
    	}
    	System.out.println(collisionAvoidanceToggleButton.isSelected());
    	printToLogDate("Collision Avoidance System: " + (radar.collisionAvoidanceOn ? "ON" : "OFF"));
    }     

  
    private void arrivingListValueChanged(javax.swing.event.ListSelectionEvent evt)
    {                       
 	   departingList.clearSelection();
 	   runwayQueueList.clearSelection();
    	
        Object[] selections = arrivingList.getSelectedValues();
        Plane[] selected = new Plane[selections.length];
        for (Plane p : handler.planeList) p.deselect();
        for (Object o : selections)
    	{
    		Plane p = (Plane)o;
    		p.setSelected();
    	}
    }  
    
    
    private void departingListValueChanged(javax.swing.event.ListSelectionEvent evt)
    {                               
    	arrivingList.clearSelection();
 	   	runwayQueueList.clearSelection();
 	   
    	 Object[] selections = departingList.getSelectedValues();
         Plane[] selected = new Plane[selections.length];
         for (Plane p : handler.planeList) p.deselect();
         for (Object o : selections)
     	{
     		Plane p = (Plane)o;
     		p.setSelected();
     	}
    }  
    
    private void runwayQueueListValueChanged(javax.swing.event.ListSelectionEvent evt)
    {                                    
    	arrivingList.clearSelection();
 	   departingList.clearSelection();
 	   
    	Object[] selections = runwayQueueList.getSelectedValues();
        Plane[] selected = new Plane[selections.length];
        for (Plane p : handler.planeList) p.deselect();
        for (Object o : selections)
    	{
    		Plane p = (Plane)o;
    		p.setSelected();
    	}
    }  

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel RadarOptionInnerPanel;
    private javax.swing.JButton addButton;
    private javax.swing.JComboBox airlineComboBox;
    private javax.swing.JList arrivingList;
    private javax.swing.JPanel arrivingPanel;
    private javax.swing.JButton arrivingRemoveButton;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JToggleButton collisionAvoidanceToggleButton;
    private javax.swing.JRadioButton collisionBoundsRB;
    private javax.swing.JSlider controlAltitudeSlider;
    private javax.swing.JTextField controlAltitudeTextField;
    private javax.swing.JComboBox controlDestinationComboBox;
    private javax.swing.JTextField controlHeadingTextField;
    private javax.swing.JSlider controlSpeedSlider;
    private javax.swing.JTextField controlSpeedTextField;
    private javax.swing.JList departingList;
    private javax.swing.JPanel departingPanel;
    private javax.swing.JButton departingRemoveButton;
    private javax.swing.JButton eventLogClearButton;
    private javax.swing.JPanel eventLogPanel;
    private javax.swing.JTextPane eventLogTextPane;
    private javax.swing.JButton exitButton;
    private javax.swing.JRadioButton fpsRB;
    private javax.swing.JSlider gateSlider;
    private javax.swing.JSlider gridSpacingSlider;
    private javax.swing.JSlider headingSlider;
    private javax.swing.JLabel idLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JSlider jSlider3;
    private javax.swing.JSlider orbitAltitudeSlider;
    private javax.swing.JButton orbitButton;
    private javax.swing.JComboBox orbitComboBox;
    private javax.swing.JPanel orbitRadiusSlider;
    private javax.swing.JRadioButton radarFadeRB;
    private javax.swing.JPanel radarOptionOuterPanel;
    private javax.swing.JSlider radarTurnSpeedSlider;
    private javax.swing.JButton runwayButton;
    private javax.swing.JList runwayQueueList;
    private javax.swing.JPanel runwayQueuePanel;
    private javax.swing.JButton runwayQueueRemoveButton;
    private javax.swing.JButton selectCrashedPlanesButton;
    private javax.swing.JRadioButton soundRB;
    private javax.swing.JSlider spawnerAltitudeSlider;
    private javax.swing.JTextField spawnerAltitudeTextField;
    private javax.swing.JComboBox spawnerDestinationComboBox;
    private javax.swing.JSlider spawnerSpeedSlider;
    private javax.swing.JTextField spawnerSpeedTextField;
    private javax.swing.JLabel stateLabel;
    private javax.swing.JSlider timeMultiplierSlider;
    private javax.swing.JRadioButton toolTipsRB;
    private javax.swing.JRadioButton totalPlanesRB;
    private javax.swing.JRadioButton totalQueRB;
    private javax.swing.JLabel typeLabel;
    // End of variables declaration//GEN-END:variables



     public void updateSelected(Plane p)
    {
    	idLabel.setText(p.getPlaneID());
    	stateLabel.setText("" + p.state);
    	setSlidersEnabled(true);
    	setButtonsEnabled(true);
    	controlDestinationComboBox.setEnabled(true);
    	
    	if (p.isArriving())
    	{
    		runwayButton.setText("Land");
    		typeLabel.setText("Arriving");
    	}
    	else
    	{
    		runwayButton.setText("Takeoff");
    		typeLabel.setText("Departing");
    	}
    	
    	controlSpeedSlider.setValue((int)p.getSpeed());
    	controlAltitudeSlider.setValue((int)p.getAltitude());
    	headingSlider.setValue((int)p.getHeading());
    	controlSpeedTextField.setText(""+(int)p.getSpeed());
    	controlAltitudeTextField.setText(""+(int)p.getAltitude());
    	controlHeadingTextField.setText(""+(int)p.getHeading());
    	controlDestinationComboBox.setSelectedItem(p.getDestination());
    }
    
    public void clearControl()
    {
    	stateLabel.setText(null);
    	idLabel.setText(null);
    	setSlidersEnabled(false);
    	setButtonsEnabled(false);
    	controlDestinationComboBox.setEnabled(false);
    	typeLabel.setText(null);
    }
    
    
    
    public void setSlidersEnabled(Boolean isEnabled)
    {
    	boolean manualOverride = false;
    	controlAltitudeSlider.setEnabled(isEnabled);
    	controlSpeedSlider.setEnabled(isEnabled);
    	headingSlider.setEnabled(isEnabled);
    	
    	controlAltitudeTextField.setEnabled(manualOverride);
    	controlSpeedTextField.setEnabled(manualOverride);
    	controlHeadingTextField.setEnabled(manualOverride);
    }
    
    public void setButtonsEnabled(Boolean isEnabled)
    {
    	runwayButton.setEnabled(isEnabled);
    	exitButton.setEnabled(isEnabled);
    	//orbitButton.setEnabled(isEnabled);
    	
    }
    
    
    public void updateAltitude()
    {
    	
    }
    
    public void updateSpeed()
    {
    	
    }
    
    public void updateHeading()
    {
    	
    }
    
    public void setSpawnerEnabled(boolean isEnabled)
    {
    	boolean manualOverride = false;
    	spawnerAltitudeSlider.setEnabled(isEnabled);
    	spawnerSpeedSlider.setEnabled(isEnabled);
    	spawnerAltitudeTextField.setEnabled(manualOverride);
    	spawnerSpeedTextField.setEnabled(manualOverride);
    	addButton.setEnabled(isEnabled);
    	orbitComboBox.setEnabled(isEnabled);
    	gateSlider.setEnabled(isEnabled);
    	spawnerDestinationComboBox.setEnabled(isEnabled);
    	airlineComboBox.setEnabled(isEnabled);
    }
    
    public void printToLog(String message)
    {
    	eventLogTextPane.setText(eventLogTextPane.getText() + message);
    }
    
    public void printToLogln(String message)
    {
    	printToLog(message + "\n");
    }
    
    public void printToLogDate(String message)
    {
    	printToLog(message + " " + new Date() + "\n");
    }
    
    
    public int getSpanwerAltitudeSliderValue()
    {
    	return spawnerAltitudeSlider.getValue();
    }
    
    public int getSpanwerSpeedSliderValue()
    {
    	return spawnerSpeedSlider.getValue();
    }
    
    public void soundAlarm()
    {
    	playSound(audio);
    }
    
    public void playSound(File sound)
	{
		try
		{
			Clip clip = AudioSystem.getClip();
			clip.open(AudioSystem.getAudioInputStream(sound));
			clip.start();
			
			//Thread.sleep(clip.getMicrosecondLength()/1000);
			System.out.println("SOund Alarm!");
		}
		catch(Exception e)
		{
			System.out.println("FILE ERROR");
		}
	}
    
    public JList<Plane> getArrivingList()
    {
    	return arrivingList;
    }
    
    public JList<Plane> getDepartingList()
    {
    	return departingList;
    }
    
    public JList<Plane> getRunwayQueueList()
    {
    	return runwayQueueList;
    }
    
    public void addToArrivingList(Plane p)
    {
    	arrivingDLM.addElement(p);
        getArrivingList().setModel(arrivingDLM);
    }
    
    public void removeFromArrivingList(Plane p)
    {
    	for (int i = 0; i < arrivingDLM.getSize(); i++)
    	{
    		System.out.println(arrivingDLM.get(i));
    		if (arrivingDLM.get(i) == p)
    		{
    			arrivingDLM.remove(i);
    			break;
    		}
    	}
    	getArrivingList().setModel(arrivingDLM);
    }
    
    public void addToDepartingList(Plane p)
    {
    	departingDLM.addElement(p);
        getDepartingList().setModel(departingDLM);
    }
    
    public void removeFromDepartingList(Plane p)
    {
    	for (int i = 0; i < departingDLM.getSize(); i++)
    	{
    		System.out.println(departingDLM.get(i));
    		if (departingDLM.get(i) == p)
    		{
    			departingDLM.remove(i);
    			break;
    		}
    	}
    	getDepartingList().setModel(departingDLM);
    }
    
    public void addToRunwayQueueList(Plane p)
    {
    	runwayDLM.addElement(p);
        getRunwayQueueList().setModel(runwayDLM);
    }
    
    public void removeFromRunwayQueueList(Plane p)
    {
    	for (int i = 0; i < runwayDLM.getSize(); i++)
    	{
    		System.out.println(runwayDLM.get(i));
    		if (runwayDLM.get(i) == p)
    		{
    			runwayDLM.remove(i);
    			break;
    		}
    	}
    	getRunwayQueueList().setModel(runwayDLM);
    }
    
    public void popFromRunwayQueue()
    {
    	if (!runwayDLM.isEmpty()) runwayDLM.remove(0);
    	getRunwayQueueList().setModel(runwayDLM);
    }
   
   public void deselectAll()
   {
	   arrivingList.clearSelection();
	   departingList.clearSelection();
	   runwayQueueList.clearSelection();
   }
   
   public void selectMatchingListObject()
   {
	   int size = handler.getTotalSelected();
	  int[] arriving = new int[size];
	  int[] departing = new int[size];
	  int[] runway = new int[size];
	  
	  int a = 0, d = 0, r = 0, max = 0;
	  for (int i = 0; i < arrivingDLM.getSize(); i++)
	  {
		  Plane p = arrivingDLM.get(i);
		  if(p.isSelected)
		  {
			if (p.isArriving()) arriving[a++] = i;
			if (p.isDeparting()) departing[d++] = i;
			if (p.isQueued()) runway[r++] = i;
			if (a > max || d > max || r > max) max++;
		  }
	  }
	  
	  int[] arrivingResized = new int[a];
	  int[] departingResized = new int[d];
	  int[] runwayResized = new int[r];
	  
	  
	  
	  for (int i = 0; i < max; i++)
	  {
		  if (i < arrivingResized.length) arrivingResized[i] = arriving[i];
		  if (i < departingResized.length) departingResized[i] = departing[i];
		  if (i < runwayResized.length) runwayResized[i] = runway[i];
	  }
	  
	  arrivingList.setSelectedIndices(arrivingResized);
	  departingList.setSelectedIndices(departingResized);
	  runwayQueueList.setSelectedIndices(runwayResized);
	  
	  //for (int i = 0; i < arrivingResized.length; i++) System.out.println(arrivingResized[i]);
	 // for (int i = 0; i < departingResized.length; i++) System.out.println(departingResized[i]);
	 // for (int i = 0; i < runwayResized.length; i++) System.out.println(runwayResized[i]);
	  
	  System.out.println(arrivingResized.length);
	  System.out.println(departingResized.length);
	  System.out.println(runwayResized.length);
   }
   
   public String getSpawnerDestination()
   {
	   return spawnerDestinationComboBox.getSelectedItem().toString();
   }
   
   public String getSpawnerAirline()
   {
	   return airlineComboBox.getSelectedItem().toString();
   }
   
   public void setHelp()
   {
	   //eventLogTextPane.setBounds(100, 100, 100, 100);
	   String s = "MOUSE and KEYBOARD INSTRUCTIONS\n\n"
	   		+ "Double Left clicking or Left clicking\n"
	   		+ "while\n"
	   		+ "holding \"ALT\" down outside of the\n"
	   		+ "airspace\n"
	   		+ "will spawn a new Arriving aircraft\n\n"
	   		+ "Double Left clicking within 10 miles\n"
	   		+ "of the center\n"
	   		+ "will spawn a new parked departing\n"
	   		+ "aircraft\n\n"
	   		+ "Single Left clicking with a\n"
	   		+ "aircrafts 3 mile\n"
	   		+ "collision radius will select the\n"
	   		+ "aircraft\n\n"
	   		+ "Single Left clicking while holding\n"
	   		+ "down \"CTRL\"\n"
	   		+ "will allow you to select more than\n"
	   		+ "one aircraft\n"
	   		+ "at a time\n\n"
	   		+ "Single Right clicking while an\n"
	   		+ "aircraft is\n"
	   		+ "selected will redirect the aircraft\n"
	   		+ "towards\n"
	   		+ "the point that was clicked\n\n"
	   		+ "Pressing \"SPACEBAR\" while\n"
	   		+ "aircraft are\n"
	   		+ "selected will add them to the\n"
	   		+ "runway queue\n\n"
	   		+ "Press \"A\" to select all\n"
	   		+ "Arriving planes\n\n"
	   		+ "Press \"CTRL\" + \" \"A\" to\n"
	   		+ "select all planes\n\n"
	   		+ "Press \"ALT\" + \" \"A\" to\n"
	   		+ "select all planes\n\n"
	   		+ "that are arriving and have\n"
	   		+ "not crashed\n\n"
	   		+ "Press \"D\" to select all\n"
	   		+ "planes departing\n\n"
	   		+ "Press \"S\" to select all\n"
	   		+ "planes that are\n"
	   		+ "in Collision situations.\n\n"
	   		+ "Press \"CTRL\" + \"S\" to\n"
	   		+ "select planes\n"
	   		+ "close to a collision but\n"
	   		+ "havent crashed\n\n"
	   		+ "Press \"ALT\" + \"S\" to\n"
	   		+ "select all planes that"
	   		+ " have crashed\n\n"
	   		+ "Press \"R\" to select all\n"
	   		+ "planes that are"
	   		+ "queued to use the runway\n\n";
	   this.eventLogTextPane.setText(s);
   }
}
